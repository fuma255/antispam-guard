<?php
	/**
 * ProcessWire FieldtypeComments > CommentFilter > CommentFilterAkismet
 *
 * Implementation of a CommentFilter class specific to the Akismet filtering service.
 *
 * ProcessWire 2.x
 * Copyright (C) 2015 by Sebastian Preisner
 * This file licensed under GPLv3.0
 *
 * https://processwire.com
 *
 *
 */

$dirname = dirname(__FILE__);
require_once($dirname . "/CommentFilter.php");

/**
 * Uses the Akismet service to identify comment spam. Module plugin for the Comments Fieldtype.
 *
 */

	class CommentFilterAntispamguard extends CommentFilter implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => __('Comment Filter: Antispam Guard', __FILE__),
			'version' => 102,
			'summary' => __('Uses a couple of filters to protect your comments from spam.', __FILE__),
			'permanent' => false,
			'singular' => false,
			'autoload' => false,
			'requires' => 'FieldtypeComments',
			);
	}

	protected $status = array();

	public function __construct() {
		parent::__construct();
		$this->comment->ip = $this->get_client_ip();
	}

	/**
	* Prüfung den Kommentar
	*
	* @since   0.1
	*
	* @param   array  $comment  Daten des Kommentars
	* @return  array            Array mit dem Verdachtsgrund [optional]
	*/
	private function _verify_comment_request($comment){

	  /* Kommentarwerte */
	  $ip = $comment->ip;
	  $url = $comment->website;
	  $body = $comment->text;
	  $email = $comment->email;
	  $author = $comment->cite;

		/* Leere Werte ? */
	  if ( empty($body) ) return array('reason' => 'empty');

	  /* IP? */
	  if ( empty($ip) ) return array('reason' => 'empty');

	  /* Leere Werte ? */
	  if ( $this->require_email_author && ( empty($email) OR empty($author) ) ) {
	    return array( 'reason' => 'empty' );
	  }

	  /* Optionen */

	  /* Bereits kommentiert? */
	  if ( $this->already_commented && ! empty($email) && self::_is_approved_email($email) ) {
			return array( 'approve' => true );
	  }

		/* Bereits als Spam makiert? */
	  if ( $this->already_commented && ! empty($email) && self::_is_spam_email($email) ) {
			return array( 'reason' => 'email-spam' );
	  }

	  /* Check for a Gravatar */
	  if ( $this->gravatar_check
				&& ! empty($email)
				&& self::_has_valid_gravatar($email) ) {
	      return array( 'approve' => true );
	  }

	  /* Bot erkannt
	  if ( ! empty($_POST['ab_spam__hidden_field']) ) {
	    return array( 'reason' => 'css' );
	  } */

	  /* Action time
	  if ( isset $this->data['time_check']
				&& self::_is_shortest_time() ) {
	    return array( 'reason' => 'time' );
	  } */

	  /* BBCode Spam */
	  if ( $this->bbcode_check && self::_is_bbcode_spam($body) ) {
	    return array( 'reason' => 'bbcode' );
	  }

	  /* Erweiterter Schutz */
	  if ( $this->advanced_check && self::_is_fake_ip($ip) ) {
	    return array( 'reason' => 'server' );
	  }

	  /* Regexp für Spam */
	  if ( $this->regexp_check && self::_is_regexp_spam(
					    array(
					      'ip'	 => $ip,
					      //'host'	 => parse_url($url, PHP_URL_HOST),
					      'body'	 => $body,
					      'email'	 => $email,
					      'author' => $author
					    ) ) ) {
	    return array( 'reason' => 'regexp' );
	  }

	  /* IP im lokalen Spam */
	  if ( $this->spam_ip_local && self::_is_db_spam($ip, $url, $email) ) {
	    return array( 'reason' => 'localdb' );
	  }

	  /* DNSBL Spam */
	  if ( $this->dnsbl_check && self::_is_dnsbl_spam($ip) ) {
	    return array( 'reason' => 'dnsbl' );
	  }
		return array ( 'approve' => false );
	}

	/**
	* Check if the E-Mail-Adresse approved.
	* Prüfung auf eine bereits freigegebene E-Mail-Adresse
	*
	* @since   0.1
	*
	* @param   string   $email  E-Mail-Adresse
	* @return  boolean          TRUE bei einem gefundenen Eintrag
	*/
	private static function _is_approved_email($email){
		/* Search */
		$commentsField = wire('fields')->find('type=FieldtypeComments');

		foreach($commentsField as $field){
			$result = FieldtypeComments::findComments($field->name, "email=$email, status=1")->first();
			/* Found? */
			if ( !empty($result) )	return true;
		}
		return false;
	}

	/**
	 * E-Mail maked as Spam?
	 *
	 * @param  [type]  $email [description]
	 * @return boolean        [description]
	 */
	private static function _is_spam_email($email){
		/* Search */
		$commentsField = wire('fields')->find('type=FieldtypeComments');

		foreach($commentsField as $field){
			$result = FieldtypeComments::findComments($field->name, "email=$email, status='-2'")->first();
			/* Found? */
			if ( !empty($result) )	return true;
		}
		return false;
	}

	/**
	* Check for a Gravatar image
	*
	* @since   0.1
	*
	* @param   string	$email  Input email
	* @return  boolean       	Check status (true = Gravatar available)
	*/
	private static function _has_valid_gravatar($email) {
	  $file = sprintf( 'https://www.gravatar.com/avatar/%s?d=404', md5( strtolower( trim($email) )));
	  $file_headers = @get_headers($file);

	  if ( strpos($headers[0], '200') === true ) {
	    return true;
	  }

	  return false;
	}

	/**
	* Prüfung auf BBCode Spa* Prüfung auf DNSBL Spam
	*
	* @since   0.1
	*
	* @param   string   $ip  IP-Adresse
	* @return  boolean       TRUE bei gemeldeter IP
	*/
	private static function _is_bbcode_spam($body){
		return (bool) preg_match('/\[url[=\]].*\[\/url\]/', $body);
	}

	/**
	* Check for a fake IP
	*
	* @since   0.1
	*
	* @param   string   $ip    Client IP
	* @param   string   $host  Client Host [optional]
	* @return  boolean         TRUE if fake IP
	*/
	private static function _is_fake_ip($client_ip, $client_host = false)	{
		/* Remote Host */
		$host_by_ip = gethostbyaddr($client_ip);

		/* IPv6 */
		if ( self::_is_ipv6($client_ip) ) {
			return $client_ip != $host_by_ip;
		}

		/* IPv4 / Comment */
		if ( empty($client_host) ) {
			$ip_by_host = gethostbyname($host_by_ip);
			if ( $ip_by_host === $host_by_ip ) {
				return false;
			}
		/* IPv4 / Trackback */
		} else {
			if ( $host_by_ip === $client_ip ) {
				return true;
			}
			$ip_by_host = gethostbyname($client_host);
		}
		if ( strpos( $client_ip, self::_cut_ip($ip_by_host) ) === false ) {
			return true;
		}
		return false;
	}

	/**
	* Anonymisierung der IP-Adressen
	*
	* @since   2.5.1
	* @change  2.5.1
	*
	* @param   string  $ip  Original IP
	* @return  string       Anonyme IP
	*/
	private static function _anonymize_ip($ip){
		if ( self::_is_ipv4($ip) ) {
			return self::_cut_ip($ip). '.0';
		}
		return self::_cut_ip($ip, false). ':0:0:0:0:0:0:0';
	}

	/**
	* Check for an IPv4 address
	*
	* @since   0.1
	*
	* @param   string   $ip  IP to validate
	* @return  integer       TRUE if IPv4
	*/
	private static function _is_ipv4($ip)	{
		if ( function_exists('filter_var') ) {
			return filter_var( $ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) !== false;
		} else {
			return preg_match('/^\d{1,3}(\.\d{1,3}){3,3}$/', $ip);
		}
	}

	/**
	* Check for an IPv6 address
	*
	* @since   0.1
	*
	* @param   string   $ip  IP to validate
	* @return  boolean       TRUE if IPv6
	*/
	private static function _is_ipv6($ip){
		if ( function_exists('filter_var') ) {
			return filter_var( $ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6 ) !== false;
		} else {
			return ! self::_is_ipv4($ip);
		}
	}

	/**
	 * Kürzung der IP-Adressen
	 *
	 * @since   0.1
	 *
	 * @param   string   $ip       Original IP
	 * @param   boolean  $cut_end  Kürzen vom Ende?
	 * @return  string             Gekürzte IP
	 */
	private static function _cut_ip($ip, $cut_end = true)	{
		/* Trenner */
		$separator = ( self::_is_ipv4($ip) ? '.' : ':' );
		return str_replace(
			( $cut_end ? strrchr( $ip, $separator) : strstr( $ip, $separator) ),
			'',
			$ip
		);
	}

	/**
	* Dreht die IP-Adresse
	*
	* @since   0.1
	*
	* @param   string   $ip  IP-Adresse
	* @return  string        Gedrehte IP-Adresse
	*/
	private static function _reverse_ip($ip){
		return implode('.', array_reverse(explode('.',$ip)));
	}

	/**
	* Anwendung von Regexp, auch benutzerdefiniert
	*
	* @since   0.1
	*
	* @param   array	$comment  Array mit Kommentardaten
	* @return  boolean       	  TRUE bei verdächtigem Kommentar
	*/
	private static function _is_regexp_spam($comment){
	  /* Felder */
	  $fields = array(
	    'ip',
			'host',
	    'body',
	    'email',
	    'author'
	  );
	  /* Regexp */
	  $patterns = array(
	    0 => array(
	      'host'	=> '^(www\.)?\d+\w+\.com$',
	      'body'	=> '^\w+\s\d+$',
	      'email'	=> '@gmail.com$'
	    ),
	    1 => array(
	      'body'	=> '\<\!.+?mfunc.+?\>'
	    )
	  );
	  /* Spammy author */
	  if ( $quoted_author = preg_quote($comment['author'], '/') ) {
	    $patterns[] = array( 'body' => sprintf( '<a.+?>%s<\/a>$', $quoted_author ) );
	    $patterns[] = array( 'body' => sprintf( '%s https?:.+?$', $quoted_author ) );
	    $patterns[] = array( 	'email'	 => '@gmail.com$',
														'author' => '^[a-z0-9-\.]+\.[a-z]{2,6}$',
	      										'host'	 => sprintf( '^%s$', $quoted_author ) );
		}

	  /* Ausdrücke loopen */
	  foreach ($patterns as $pattern) {
	    $hits = array();
	    /* Felder loopen */
	    foreach ($pattern as $field => $regexp) {
	      /* Empty value? */
	      if ( empty($field) OR !in_array($field, $fields) OR empty($regexp) ) {
	        continue;
	      }
	      /* Ignore non utf-8 chars */
	      $comment[$field] = ( function_exists('iconv') ? iconv('utf-8', 'utf-8//TRANSLIT', $comment[$field]) : $comment[$field] );

			  /* Empty value? */
	      if ( empty($comment[$field]) ) {
	        continue;
	      }

	      /* Perform regex */
	      if ( @preg_match('/' .$regexp. '/isu', $comment[$field]) ) {
	        $hits[$field] = true;
	      }
	    }
	    if ( count($hits) === count($pattern) ) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	* Prüfung eines Kommentars auf seine Existenz im lokalen Spam
	*
	* @since   0.1
	*
	* @param   string	$ip     Kommentar-IP
	* @param   string	$url    Kommentar-URL [optional]
	* @param   string	$email  Kommentar-Email [optional]
	* @return  boolean        TRUE bei verdächtigem Kommentar
	*/
	private static function _is_db_spam($ip, $url = '', $email = ''){
		/* Default */
		$filter = array('`ip` = %s');
		$params = array( stripslashes($ip) );
		/* URL abgleichen */
		if ( ! empty($url) ) {
			$filter[] = '`website` = %s';
			$params[] = stripslashes($url);
		}
		/* E-Mail abgleichen */
		if ( ! empty($email) ) {
			$filter[] = '`email` = %s';
			$params[] = stripslashes($email);
		}
		/* Query ausführen */
		$commentsField = wire('fields')->find('type=FieldtypeComments');

		foreach($commentsField as $field){

			$result = wire('db')->query( vsprintf(
									sprintf("SELECT `id` FROM `{$field->getTable()}` WHERE `status` = '-2' AND (%s) LIMIT 1",
										implode(' OR ', $filter) ), $params ) );

			/* Found? */
			if ( !empty($result) )	return true;
		}

		return false;
	}

	/**
	* Prüfung auf DNSBL Spam
	*
	* @since   0.1
	*
	* @param   string   $ip  IP-Adresse
	* @return  boolean       TRUE bei gemeldeter IP
	*/
	private static function _is_dnsbl_spam($ip){
		/* Start request */
		$response = file_get_contents( sprintf('http://www.stopforumspam.com/api?ip=%s&f=json', $ip) );

		/* Get JSON */
		$json = $response;
		/* Decode JSON */
		$result = json_decode($json);
		/* Empty data */
		if ( empty($result->success) ) {
			return false;
		}
		/* Return status */
		return (bool) $result->ip->appears;
	}

	/**
	* Return real client IP
	*
	* @since   0.1
	*
	* @return  mixed  $ip  Client IP
	*/
	public static function get_client_ip(){
		if ( isset($_SERVER['HTTP_CLIENT_IP']) ) {
			$ip = $_SERVER['HTTP_CLIENT_IP'];
		} else if ( isset($_SERVER['HTTP_X_FORWARDED_FOR']) ) {
			$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		} else if ( isset($_SERVER['HTTP_X_FORWARDED']) ) {
			$ip = $_SERVER['HTTP_X_FORWARDED'];
		} else if ( isset($_SERVER['HTTP_FORWARDED_FOR']) ) {
			$ip = $_SERVER['HTTP_FORWARDED_FOR'];
		} else if ( isset($_SERVER['HTTP_FORWARDED']) ) {
			$ip = $_SERVER['HTTP_FORWARDED'];
		} else if ( isset($_SERVER['REMOTE_ADDR']) ) {
			$ip = $_SERVER['REMOTE_ADDR'];
		} else {
			return '';
		}

		if ( strpos($ip, ',') !== false ) {
			$ips = explode(',', $ip);
			$ip = trim(@$ips[0]);
		}

		if ( function_exists('filter_var') ){
			return filter_var( $ip,	FILTER_VALIDATE_IP );
		}

		return preg_replace( '/[^0-9a-f:\., ]/si', '', $ip );

	}

	public function checkSpam() {
		if($this->comment->status == Comment::statusSpam) return true;

		$status = $this->_verify_comment_request($this->comment);

		if( ! empty($status['reason']) ){
			if($this->logging) $this->log->save('antispamguard', "Spam: {$status['reason']}");
 			$this->comment->status = Comment::statusSpam;
		} elseif ( $this->approve_comment || $status['approved'] ) {
      if($this->logging) $this->log->save('antispamguard', "Approve: {$status['reason']}");
			$this->comment->status = Comment::statusApproved;
		} else {
      if($this->logging) $this->log->save('antispamguard', "Pending: {$status['reason']}");
			$this->comment->status = Comment::statusPending;
		}

	}

	public function submitSpam() {

	}

	public function submitHam() {

	}

}
